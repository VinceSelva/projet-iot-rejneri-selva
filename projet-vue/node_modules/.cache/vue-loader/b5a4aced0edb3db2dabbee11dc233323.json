{"remainingRequest":"C:\\Users\\Max\\Desktop\\Menez\\tp3\\tp_app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Max\\Desktop\\Menez\\tp3\\tp_app\\src\\components\\HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Max\\Desktop\\Menez\\tp3\\tp_app\\src\\components\\HelloWorld.vue","mtime":1585607273833},{"path":"C:\\Users\\Max\\Desktop\\Menez\\tp3\\tp_app\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Max\\Desktop\\Menez\\tp3\\tp_app\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Max\\Desktop\\Menez\\tp3\\tp_app\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Max\\Desktop\\Menez\\tp3\\tp_app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Max\\Desktop\\Menez\\tp3\\tp_app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpoMyB7CiAgbWFyZ2luOiA0MHB4IDAgMDsKfQp1bCB7CiAgbGlzdC1zdHlsZS10eXBlOiBub25lOwogIHBhZGRpbmc6IDA7Cn0KbGkgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICBtYXJnaW46IDAgMTBweDsKfQphIHsKICBjb2xvcjogIzQyYjk4MzsKfQo="},{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <div id=\"app\"><Chart /></div>\n    <div id=\"container1\" style=\"max-width: 1000px; height: 350px; margin: 0 auto\"></div>\n    <div id=\"container2\" style=\"max-width: 1000px; height: 350px; margin: 0 auto\"></div>\n  </div>\n</template>\n\n<script>\n//var Highcharts = require(\"highcharts\");\nimport Chart from \"./components/Chart\";\n\n//import highcharts from 'https://code.highcharts.com/highcharts.js'\nexport default {\n  name: \"HelloWorld\",\n  data(){\n    node_url = \"\"\n  },\n  components: {\n    Chart\n  },\n  props: {\n    msg: String\n  },\n  mounted() {\n    \n  },\n\n  methods: {\n    get_samples(path_on_node, serie, wh) {\n      // path_on_node => help to compose url to get on Js node\n      // serie => for choosing chart/serie on the page\n      // wh => which esp do we want to query data\n\n      this.node_url = 'http://localhost:3000'\n      //node_url = 'https://node-tp3.herokuapp.com'\n      //node_url = 'http://10.9.128.189:3000'\n      /* node_url = 'http://192.168.1.102:3000' */\n\n      //https://openclassrooms.com/fr/courses/1567926-un-site-web-dynamique-avec-jquery/1569648-le-fonctionnement-de-ajax\n\n      let url = node_url + path_on_node + \"?who=\" + wh;\n      fetch(url)\n        .then(responseJSON => {\n          return responseJSON.json();\n        })\n        .then(responseJS => {\n          this.items = responseJS.data; \n          serie.setData(items)\n        });\n    /*   $.ajax({\n        url: node_url.concat(path_on_node), // URL to \"GET\" : /esp/temp ou /esp/light\n        type: \"GET\",\n        headers: { Accept: \"application/json\" },\n        data: { who: wh }, // parameter of the GET request\n        success: function(resultat, statut) {\n          // Anonymous function on success\n          let listeData = [];\n          resultat.forEach(function(element) {\n            listeData.push([Date.parse(element.date), element.value]);\n            //listeData.push([Date.now(),element.value]);\n          });\n          serie.setData(listeData); //serie.redraw();\n        },\n        error: function(resultat, statut, erreur) {},\n        complete: function(resultat, statut) {}\n      }); */\n    },\n\n    process_esp(which_esps, i) {\n      const refreshT = 100000; // Refresh period for chart\n      esp = which_esps[i]; // L'ESP \"a dessiner\"\n      //console.log(esp) // cf console du navigateur\n\n      // Gestion de la temperature\n      // premier appel pour eviter de devoir attendre RefreshT\n      this.get_samples(\"/esp/temp\", chart1.series[i], esp);\n      //calls a function or evaluates an expression at specified\n      //intervals (in milliseconds).\n      window.setInterval(\n        this.get_samples,\n        refreshT,\n        \"/esp/temp\", // param 1 for get_samples()\n        chart1.series[i], // param 2 for get_samples()\n        esp\n      ); // param 3 for get_samples()\n\n      // Gestion de la lumiere\n      this.get_samples(\"/esp/light\", chart2.series[i], esp);\n      window.setInterval(\n        this.get_samples,\n        refreshT,\n        \"/esp/light\", // URL to GET\n        chart2.series[i], // Serie to fill\n        esp\n      ); // ESP targeted\n    },\n    draw_lines() {\n      var which_esps = [\n        \"1761716416\",\n        \"B4:E6:2D:96:78:D9\",\n        \"80:7D:3A:FD:E8:E8\",\n        \"30:AE:A4:86:CA:7C\",\n        \"80:7D:3A:FD:DD:08\"\n      ];\n      for (var i = 0; i < which_esps.length; i++) {\n        this.process_esp(which_esps, i);\n      }\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}]}